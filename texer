#!/usr/bin/bash

# VARIABLE INIT
PROG="texer"
MODE="draft"
FILE="NONE"
LOG="log.txt"
SECOND_NEEDED="FALSE"


## FUNCTIONS
show_log_and_exit() {
  cat $LOG
  echo -e "\nImportant bit:"
  grep Error log.txt
  rm $LOG
  exit 1
}

show_log() {
  cat $LOG
}

usage() {
    echo ""
    echo " $PROG is a pdf document compiler."
    echo " Usage is: "
    echo "   $PROG [--compress] <file>"
    echo ""
}

usage_and_exit() {
  usage && exit 1
}

gen_nomenclature() {
  if [ -f "$FILE_NOEX.nlo" ]; then
    makeindex "$FILE_NOEX.nlo" -s nomencl.ist -o "$FILE_NOEX.nls" &> $LOG || (nomenclfailed && return)
    SECOND_NEEDED="TRUE"
    echo "--> Nomenclature generated"
  fi
}

nomenclfailed() {
  echo "--> Warning: could not generate nomenclature" && show_log
}

gen_bibliography() {
  if [ "$(grep bibstyle "$FILE_NOEX.aux" &> /dev/null; echo $?)" -eq 0 ]; then
    bibtex "$FILE_NOEX" &> $LOG || (bibfailed && return)
    SECOND_NEEDED="TRUE"
    echo "--> Bibliography generated (bibtex)"
    return
  fi
  if [ -f "$FILE_NOEX.bcf" ]; then
    if command -v "biber" &> /dev/null; then
      biber "$FILE_NOEX" &> $LOG || (bibfailed && return)
      SECOND_NEEDED="TRUE"
      echo '--> Bibliography generated (biber)'
      return
    else
      echo '--> Warning: "biber" not found!'
      bibfailed && return
    fi
  fi
}

bibfailed() {
    echo "--> Warning: could not generate bibliography" && show_log
}


## Options parsing
while [[ $# -gt 0 ]]
do
  key="$1"
  
  case $key in
    -c|--compress)
      MODE="compress"
      shift
      ;;
    *)
      if [[ $FILE = "NONE" ]]
      then
        FILE=$key
      else
        echo "Only one file at a time!"
        usage_and_exit
      fi
      shift
      ;;
  esac
done

if [[ $FILE = "NONE" ]]
then
  echo "Need to specify a file!"
  usage_and_exit
fi


echo "TODO: BUG WITH BIBLIO COMPILATION"


## Check if in same location as file to be compiled.
FILE_DIR=$(realpath "$(dirname "$FILE")")
if [[ "$PWD" != "$FILE_DIR" ]]
then
  echo "$PWD" "$FILE_DIR"
  echo "!!> Error: $PROG must be run from same directory as file."
  exit 1
fi

## Check extension
EXT="${FILE##*.}"
FILE_NOEX="${FILE%.*}"

if [[ $EXT != "tex" && $(command -v pandoc &> /dev/null; echo $?) != 0 ]]
then
  echo "!!> Error: pandoc is required to compile non-latex files."
  exit 1
fi

case $EXT in
  "tex")
    ;;
  "md")
    echo "--> Generating LaTeX file from markdown"
    pandoc "$FILE" -t latex -s -o "$FILE_NOEX.tex"
    FILE=$FILE_NOEX.tex
    GARBAGE="$GARBAGE $FILE"
    ;;
  *)
    echo "!!> Error: unknown extension '$EXT'"
    echo "    Only .tex and .md files are supported."
    exit 1
    ;;
esac

TEXEX=lualatex
TEXOPTS="-interaction=nonstopmode --shell-escape"
TEXCMD="${TEXEX} ${TEXOPTS}"
DRAFTTEXCMD="$TEXCMD -draftmode"

if [[ $(command -v $TEXEX &> /dev/null; echo $?) != 0 ]]
then
  echo "!!> Error: $TEXEX is required to compile LaTeX."
fi

echo "--> First compilation"
$DRAFTTEXCMD "$FILE" &> $LOG || show_log_and_exit

gen_nomenclature
gen_bibliography

if [[ "$SECOND_NEEDED" != "TRUE" ]]; then
    echo "--> Second compilation"
    $DRAFTTEXCMD "$FILE" &> "$LOG" || show_log_and_exit
fi

echo "--> Final compilation"
$TEXCMD "$FILE" &> "$LOG" || show_log_and_exit


if [[ $MODE = "compress" ]]; then
    ORIG_SZ=$(du -m "$FILE_NOEX.pdf" | cut -f1)
    echo "--> Compressing PDF"
    gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dNOPAUSE -dQUIET -dBATCH -sOutputFile="$FILE_NOEX-compressed.pdf" "$FILE_NOEX.pdf"
    mv "$FILE_NOEX-compressed.pdf" "${FILE_NOEX}.pdf"
    NEW_SZ=$(du -m "$FILE_NOEX.pdf" | cut -f1)
    echo "--> PDF shrunk from ${ORIG_SZ}MB to ${NEW_SZ}MB"
fi


echo "--> Cleaning up"
rm -rf ./*.aux ./*.nls ./*.log ./*.ilg ./*.nlo ./*~ ./*.bbl ./*.blg ./*.out ./*.toc ./*.bcf ./*.run.xml "$LOG"

echo "--> Compilation complete! Pdf output to '${FILE_NOEX}.pdf'"
